<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-binutils-pass2" role="wrap">
  <?dbhtml filename="binutils-pass2.html"?>

  <sect1info condition="script">
    <productname>binutils-pass2</productname>
    <productnumber>&binutils-version;</productnumber>
    <address>&binutils-url;</address>
  </sect1info>

  <title>Binutils-&binutils-version; - Pass 2</title>

  <indexterm zone="ch-tools-binutils-pass2">
    <primary sortas="a-Binutils">Binutils</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter08/binutils.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&binutils-tmpp2-sbu;</seg>
        <seg>&binutils-tmpp2-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Installation of Binutils</title>

    <!-- Don't remove this until Binutils upstream resolves this issue.
         We can test by building Binutils on a complete system with
         zlib (libz.so) installed, passing enable-shared and
         without-system-zlib.  If the resulted libctf.so still links against
         libz.so (check with readelf -d) despite we are saying
         without-system-zlib, then the issue is still unresolved.  -->
    <para>Binutils building system relies on an shipped libtool copy to link against
    internal static libraries, but the libiberty and zlib copies shipped
    in the package do not use libtool.  This inconsistency may cause
    produced binaries mistakenly linked against libraries from the host
    distro.  Work around this issue:</para>

<screen><userinput remap="pre">sed '6031s/$add_dir//' -i ltmain.sh</userinput></screen>

    <para>Create a separate build directory again:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>Prepare Binutils for compilation:</para>

<screen><userinput remap="configure">../configure                   \
    --prefix=/usr              \
    --build=$(../config.guess) \
    --host=$LFS_TGT            \
    --disable-nls              \
    --enable-shared            \
    --enable-gprofng=no        \
    --disable-werror           \
    --enable-64-bit-bfd        \
    --enable-new-dtags         \
    --enable-default-hash-style=gnu</userinput></screen>

    <variablelist>
      <title>The meaning of the new configure options:</title>

      <varlistentry>
        <term><parameter>--enable-shared</parameter></term>
        <listitem>
          <para>Builds <filename
          class="libraryfile">libbfd</filename> as a shared library.</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><parameter>--enable-64-bit-bfd</parameter></term>
        <listitem>
          <para>Enables 64-bit support (on hosts with smaller word sizes).
          This may not be needed on 64-bit systems, but it does no harm.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Compile the package:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>Install the package:</para>

<screen><userinput remap="install">make DESTDIR=$LFS install</userinput></screen>

    <para>Remove the libtool archive files because they are harmful for
    cross compilation, and remove unnecessary static libraries:</para>

<screen><userinput remap="install">rm -v $LFS/usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes,sframe}.{a,la}</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Details on this package are located in
    <xref linkend="contents-binutils" role="."/></para>

  </sect2>

</sect1>
