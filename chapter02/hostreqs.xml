<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-partitioning-hostreqs" xreflabel="Host System Requirements">
  <?dbhtml filename="hostreqs.html"?>

  <title>Host System Requirements</title>

  <sect2>
     <title>Hardware</title>

     <para>The LFS editors recommend that the system CPU have at least
     four cores and that the system have at least 8 GB of memory. 
     Older systems that do not meet these requirements will still work,
     but the time to build packages will be significantly longer
     than documented.
  </para>

  </sect2>

  <sect2>
     <title>Software</title>

    <para>Your host system should have the following software with the
    minimum versions indicated. This should not be an issue for most
    modern Linux distributions. Also note that many distributions will
    place software headers into separate packages, often in the form of
    <literal><replaceable>&lt;package-name&gt;</replaceable>-devel</literal>
    or
    <literal><replaceable>&lt;package-name&gt;</replaceable>-dev</literal>.
    Be sure to install those if your distribution provides them.</para>

   <para>Earlier versions of the listed software packages may work, but have
   not been tested.</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh
      should be a symbolic or hard link to bash)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.13.1</emphasis> (Versions
      greater than &binutils-version; are not recommended as they have
      not been tested)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> (/usr/bin/yacc
      should be a link to bison or a small script that executes bison)</para>
    </listitem>

    <!-- In Coreutils-8.1 the nproc program is added.  -->
    <listitem>
      <para><emphasis role="strong">Coreutils-8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk
      should be a link to gawk)</para>
    </listitem>

    <listitem>
      <!-- Pass 1 GCC FTBFS with GCC-5.1 because of
           https://gcc.gnu.org/PR65801. -->
      <para><emphasis role="strong">GCC-5.2</emphasis> including the C++
      compiler, <command>g++</command> (Versions greater than &gcc-version; are
      not recommended as they have not been tested). C and C++ standard
      libraries (with headers) must also be present so the C++ compiler can
      build hosted programs</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>The reason for the kernel version requirement is that we specify
      that version when building <application>glibc</application> in
      <xref linkend="chapter-cross-tools"/> and
      <xref linkend="chapter-building-system"/>, so the workarounds for
      older kernels are not enabled and the compiled
      <application>glibc</application> is slightly faster and smaller.
      As at Dec 2024, &min-kernel; is the oldest kernel release still
      supported by the kernel developers.  Some kernel releases older than
      &min-kernel; may be still supported by third-party teams, but they
      are not considered official upstream kernel releases; read
      <ulink url='https://kernel.org/category/releases.html'/> for the
      details.</para>

      <para>If the host kernel is earlier than &min-kernel; you will need to replace
      the kernel with a more up-to-date version. There are two ways
      you can go about this. First, see if your Linux vendor provides a &min-kernel;
      or later kernel package. If so, you may wish to install it. If your
      vendor doesn't offer an acceptable kernel package, or you would prefer not to
      install it, you can compile a kernel yourself. Instructions for
      compiling the kernel and configuring the boot loader (assuming the host
      uses GRUB) are located in <xref linkend="chapter-bootable"/>.</para>

      <para>We require the host kernel to support UNIX 98 pseudo terminal
      (PTY).  It should be enabled on all desktop or server distros shipping
      Linux &min-kernel; or a newer kernel. If you are building a custom
      host kernel, ensure <option>CONFIG_UNIX98_PTYS</option> is set to
      <literal>y</literal> in the kernel configuration.</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-5.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>Note that the symlinks mentioned above are required to build an LFS
    system using the instructions contained within this book. Symlinks that
    point to other software (such as dash, mawk, etc.) may work, but are not
    tested or supported by the LFS development team, and may require either
    deviation from the instructions or additional patches to some
    packages.</para>
  </important>

  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
  <bridgehead renderas="sect2"
              id="version-check"
              xreflabel="Host System Requirements">
  </bridgehead>
  <!--<title> </title>-->

  <para >To see whether your host system has all the appropriate versions, and
  the ability to compile programs, run the following commands:</para>

<screen role="nodump"><?dbfo keep-together="auto"?><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# A script to list version numbers of critical development tools

# If you have tools installed in other directories, adjust PATH here AND
# in ~lfs/.bashrc (section 4.4) as well.

LC_ALL=C 
PATH=/usr/bin:/bin

bail() { echo "FATAL: $1"; exit 1; }
grep --version > /dev/null 2> /dev/null || bail "grep does not work"
sed '' /dev/null || bail "sed does not work"
sort   /dev/null || bail "sort does not work"

ver_check()
{
   if ! type -p $2 &amp;>/dev/null
   then 
     echo "ERROR: Cannot find $2 ($1)"; return 1; 
   fi
   v=$($2 --version 2>&amp;1 | grep -E -o '[0-9]+\.[0-9\.]+[a-z]*' | head -n1)
   if printf '%s\n' $3 $v | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    %-9s %-6s >= $3\n" "$1" "$v"; return 0;
   else 
     printf "ERROR: %-9s is TOO OLD ($3 or later required)\n" "$1"; 
     return 1; 
   fi
}

ver_kernel()
{
   kver=$(uname -r | grep -E -o '^[0-9\.]+')
   if printf '%s\n' $1 $kver | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    Linux Kernel $kver >= $1\n"; return 0;
   else 
     printf "ERROR: Linux Kernel ($kver) is TOO OLD ($1 or later required)\n" "$kver"; 
     return 1; 
   fi
}

# Coreutils first because --version-sort needs Coreutils >= 7.0
ver_check Coreutils      sort     8.1 || bail "Coreutils too old, stop"
ver_check Bash           bash     3.2
ver_check Binutils       ld       2.13.1
ver_check Bison          bison    2.7
ver_check Diffutils      diff     2.8.1
ver_check Findutils      find     4.2.31
ver_check Gawk           gawk     4.0.1
ver_check GCC            gcc      5.2
ver_check "GCC (C++)"    g++      5.2
ver_check Grep           grep     2.5.1a
ver_check Gzip           gzip     1.3.12
ver_check M4             m4       1.4.10
ver_check Make           make     4.0
ver_check Patch          patch    2.5.4
ver_check Perl           perl     5.8.8
ver_check Python         python3  3.4
ver_check Sed            sed      4.1.5
ver_check Tar            tar      1.22
ver_check Texinfo        texi2any 5.0
ver_check Xz             xz       5.0.0
ver_kernel &min-kernel;

if mount | grep -q 'devpts on /dev/pts' &amp;&amp; [ -e /dev/ptmx ]
then echo "OK:    Linux Kernel supports UNIX 98 PTY";
else echo "ERROR: Linux Kernel does NOT support UNIX 98 PTY"; fi

alias_check() {
   if $1 --version 2>&amp;1 | grep -qi $2
   then printf "OK:    %-4s is $2\n" "$1";
   else printf "ERROR: %-4s is NOT $2\n" "$1"; fi
}
echo "Aliases:"
alias_check awk GNU
alias_check yacc Bison
alias_check sh Bash

echo "Compiler check:"
if printf "int main(){}" | g++ -x c++ -
then echo "OK:    g++ works";
else echo "ERROR: g++ does NOT work"; fi
rm -f a.out

if [ "$(nproc)" = "" ]; then
   echo "ERROR: nproc is not available or it produces empty output"
else
   echo "OK: nproc reports $(nproc) logical cores are available"
fi</literal>
EOF

bash version-check.sh</userinput></screen>

 </sect2>
</sect1>
